[
  {
    "bookSourceComment": "",
    "bookSourceGroup": "English",
    "bookSourceName": "WTR-LAB",
    "bookSourceType": 0,
    "bookSourceUrl": "https://wtr-lab.com",
    "customOrder": 0,
    "enabled": true,
    "enabledCookieJar": true,
    "enabledExplore": true,
    "exploreUrl": "Index::/novel-finder?orderBy=name&order=asc&ge=29%2C39&page={{page}}\nDaily::/ranking/daily?page={{page}}\nWeekly::/ranking/weekly?page={{page}}\nMonthly::/ranking/monthly?page={{page}}",
    "lastUpdateTime": 1745213434770,
    "loginCheckJs": "",
    "respondTime": 180000,
    "ruleBookInfo": {
      "author": "//td[contains(text(), \"Author\")]/following-sibling::td/div/a/text()<js>\nresult.replace(/\\n/, \", \")\n</js>",
      "coverUrl": "//script[@id=\"__NEXT_DATA__\"]/text()<js>\nresult = `${JSON.parse(result).props.pageProps.serie.serie_data.data.image}`\n</js>",
      "intro": "//script[@id=\"__NEXT_DATA__\"]/text()<js>\nresult = `\\n${JSON.parse(result).props.pageProps.serie.serie_data.data.description}`\n</js>",
      "kind": "//td[contains(text(), \"Genre\")]/following-sibling::td/a/text()[1]<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split('-')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.slice(0, 1).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join('-');\n}\nresult = Array.from(result).map(function(genre) {\n\treturn toTitleCase(genre);\n});\n</js>",
      "lastChapter": "//script[@id=\"__NEXT_DATA__\"]/text()<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split(' ')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join(' ');\n}\nraw = JSON.parse(result)\ndata = raw.props.pageProps.serie\njava.put(\"slug\", data.serie_data.slug)\njava.put(\"build_id\", raw.buildId)\njava.put(\"id\", raw.query.sid)\noutput = \"#\" + data.last_chapters[0].order + \" - \" + toTitleCase(data.last_chapters[0].title)\n</js>",
      "name": "//h1/text()[not(ancestor::span[@class=\"rawtitle\"])]<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split(' ')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join(' ');\n}\nresult = toTitleCase(result.replace(/\\n/g, ' ')\n\t.replace(/\\s+/g, ' ').trim())\n</js>",
      "tocUrl": "<js>\n\"https://wtr-lab.com/api/chapters/@get:{id}?start=1&end=9999\"\n</js>",
      "wordCount": ""
    },
    "ruleContent": {
      "content": "//div[contains(@class, \"chapter-body\")]/p",
      "nextContentUrl": "",
      "title": "//h3[@class=\"chapter-title\"]//text()<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split(' ')\n        .map((word, index, arr) => {\n            if (index === 2 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join(' ');\n}\nresult = toTitleCase(result.replace(/\\n/g, \"\")\n\t.replace(/\\s+/g, \" \")\n\t.replace(/Chapter\\s\\d+:?/g, \" -\")\n\t.replace(/\\s\\(.+\\s[mM]ore!*\\)/g, \"\")\n\t.trim())\n</js>"
    },
    "ruleExplore": {
      "bookList": "//div[@class=\"serie-item\"]",
      "bookUrl": "//a[contains(@class, \"title\")]/@href",
      "coverUrl": "//img[not(contains(@src, \"svg\"))]/@src",
      "intro": "//span[@class=\"description\"]/text()@js:result.replace(/\\n/g, \"\").replace(/\\s+/g, \" \").trim()",
      "kind": "//div[@class=\"genres\"]/span/text()<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split('-')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.slice(0, 1).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join('-');\n}\nresult = Array.from(result).map(function(genre) {\n\treturn toTitleCase(genre);\n});\n</js>",
      "name": "//a[contains(@class, \"title\")]//text()[not(ancestor::span[@class=\"rawtitle\"])]<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split(' ')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join(' ');\n}\nresult = toTitleCase(result.replace(/#\\n/, \"#\")\n\t.replace(/\\n/g, ' ')\n\t.replace(/\\s+/g, ' ')\n\t.trim())\n</js>"
    },
    "ruleSearch": {
      "author": "",
      "bookList": "//div[@class=\"series-list\"]/div",
      "bookUrl": "//a[contains(@class, \"title\")]/@href",
      "checkKeyWord": "Alien Hotel",
      "coverUrl": "//img[not(contains(@src, \"svg\"))]/@src",
      "intro": "//span[@class=\"description\"]/text()@js:result.replace(/\\n/g, \"\").replace(/\\s+/g, \" \").trim()",
      "kind": "//div[@class=\"genres\"]/span/text()<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split('-')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.slice(0, 1).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join('-');\n}\nresult = Array.from(result).map(function(genre) {\n\treturn toTitleCase(genre);\n});\n</js>",
      "lastChapter": "",
      "name": "//a[contains(@class, \"title\")]//text()[not(ancestor::span[@class=\"rawtitle\"])]<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n    return sentence\n        .split(' ')\n        .map((word, index, arr) => {\n            if (index === 0 || index === arr.length - 1 || hasMultipleCaps(word) || !lowerCaseWords.includes(word.toLowerCase())) {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }\n            return word.toLowerCase();\n        })\n        .join(' ');\n}\nresult = toTitleCase(result.replace(/\\n/g, ' ')\n\t.replace(/\\s+/g, ' ')\n\t.trim())\n</js>",
      "wordCount": ""
    },
    "ruleToc": {
      "chapterList": "$.chapters.[*]",
      "chapterName": "#{{$.order}} - {{$.title}}<js>\nfunction toTitleCase(sentence) {\n    const lowerCaseWords = ['a', 'an', 'and', 'the', 'in', 'on', 'at', 'by', 'for', 'of', 'with', 'to', 'but', 'or', 'nor', 'as'];\n    \n    function hasMultipleCaps(word) {\n        return (word.match(/[A-Z]/g) || []).length >= 2;\n    }\n\n    return sentence\n        .split(' ')\n        .map((word, index, arr) => {\n            const previousWord = arr[index - 1];\n            \n            if (\n                index === 0 || \n                index === arr.length - 1 || \n                hasMultipleCaps(word) || \n                (previousWord && (previousWord.endsWith(':') || previousWord.endsWith('-'))) || \n                !lowerCaseWords.includes(word.toLowerCase())\n            ) {\n                return word.charAt(0).toUpperCase() + word.slice(1);\n            }\n            \n            return word.toLowerCase();\n        })\n        .join(' ');\n}\nresult = toTitleCase(result\n\t.replace(/\\(.+\\s[mM]ore!*\\)/g, \"\")\n\t.replace(/Chapter\\s\\d+\\s/g, \"\")\n\t.replace(/\\)$/, \"\")\n\t.replace(/(^#\\d+\\s\\-\\s)\\(/g, \"$1\"))\n</js>",
      "chapterUrl": "<js>\noptions = {\n  \"webView\": true\n}\n\"https://wtr-lab.com/en/serie-@get:{id}/@get:{slug}/chapter-{{$.order}}?service=google\" + \",\" + JSON.stringify(options)\n</js>",
      "formatJs": "",
      "updateTime": "$.updated_at<js>\nfunction formatDateTime(dateTimeStr) {\n        const [datePart, timePart] = dateTimeStr.split(\" \");\n        const formattedDateTimeStr = `${datePart}T${timePart.split(\".\")[0]}Z`;\n\n        const date = new Date(formattedDateTimeStr);\n        return date.toLocaleString();\n}\nresult = formatDateTime(result)\n</js>"
    },
    "searchUrl": "/novel-finder?ge=29%2C39&text={{key}}",
    "weight": 0
  }
]